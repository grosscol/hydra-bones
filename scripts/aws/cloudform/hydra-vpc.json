{
   "AWSTemplateFormatVersion" : "2010-09-09",
   "Description" : "Cloud formation for basic analog of UMich library hydra stack.",
   "Resources" : {
      "peekerRole" : {
        "Type" : "AWS::IAM::Role",
        "Properties" : {
          "Path": "/peekers/",
          "AssumeRolePolicyDocument":{
            "Version": "2012-10-17",
            "Statement": [ {
              "Effect": "Allow",
              "Principal": { "Service": [ "ec2.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            } ]
          }
        }
      },
      "peekerPolicy" : {
        "Type" : "AWS::IAM::Policy",
        "Properties" : {
          "PolicyName" : "cloudViewPol",
          "PolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement" : [ { 
              "Effect" : "Allow",
              "Action" : [
                "cloudformation:Describe*","cloudformation:List*","cloudformation:Get*"
                ],
              "Resource" : "*"
            } ]
          },
          "Roles" : [ {"Ref": "peekerRole"}]
        }
      },
      "peekerProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "Path": "/peekers/",
          "Roles": [ {"Ref": "peekerRole"} ]
        }
      },
      "hydravpc2" : {
         "Type" : "AWS::EC2::VPC",
         "Properties" : {
            "CidrBlock" : "172.10.0.0/16",
    	    "EnableDnsSupport" : "true",
    	    "EnableDnsHostnames" : "true",
            "InstanceTenancy" : "default",
            "Tags" : [ {"Key" : "Name", "Value" : "hydravpc2"}, {"Key" : "CreatedUsing", "Value" : "CloudFormation"} ]
         }
      },
      "dhcpOpts" : {
        "Type" : "AWS::EC2::DHCPOptions",
        "Properties" : {
          "DomainName" : "ec2.internal",
          "DomainNameServers" : [ "AmazonProvidedDNS" ],
          "Tags" : [ {"Key" : "Name", "Value" : "dhcp-opts"} ]
        }
      },
      "dchpAssoc" : {
        "Type" : "AWS::EC2::VPCDHCPOptionsAssociation",
        "Properties" : {
          "DhcpOptionsId" : { "Ref" : "dhcpOpts" },
          "VpcId" : { "Ref" : "hydravpc2" }
        }
      },
      "prvnet" : {
        "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "CidrBlock" : "172.10.10.0/24",
          "VpcId" : { "Ref" : "hydravpc2" },
          "Tags" : [ {"Key" : "Name", "Value" : "prvnet"} ]
        }
      },
      "pubnet" : {
        "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "CidrBlock" : "172.10.1.0/24",
          "VpcId" : { "Ref" : "hydravpc2" },
          "Tags" : [ {"Key" : "Name", "Value" : "pubnet"} ]
        }
      },
      "hydraGateway" : {
        "Type" : "AWS::EC2::InternetGateway",
        "Properties" : {
          "Tags" : [ {"Key" : "Name", "Value" : "hydra-gateway"} ]
        }
      },
      "gatewayAttach" : {
        "Type" : "AWS::EC2::VPCGatewayAttachment",
        "Properties" : {
          "InternetGatewayId" : { "Ref" : "hydraGateway" },
          "VpcId" : { "Ref" : "hydravpc2" }
        }
      },
      "pubRTable" : {
        "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId" : { "Ref" : "hydravpc2" },
          "Tags" : [{ "Key" : "Name", "Value" : "pub_rtable" }]
        }
      },
      "pubroute" : {
        "Type" : "AWS::EC2::Route",
        "Properties" : {
          "DestinationCidrBlock" : "0.0.0.0/0",
          "GatewayId" : { "Ref" : "hydraGateway" },
          "RouteTableId" : { "Ref" : "pubRTable" }
        }
      },
      "pubTableAssoc" : {
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "RouteTableId" : { "Ref" : "pubRTable" },
          "SubnetId" : { "Ref" : "pubnet" }
        }
      },
      "puppetSecGp": {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupDescription" : "Puppet Master/Agent security group",
          "SecurityGroupEgress" : [ {"IpProtocol" : "tcp", "FromPort" : 8140, "ToPort" : 8140, "CidrIp" : "172.10.0.0/16"} ],
          "SecurityGroupIngress" : [ {"IpProtocol" : "tcp", "FromPort" : 8140, "ToPort" : 8140, "CidrIp" : "172.10.0.0/16"} ],
          "Tags" : [{ "Key" : "Name", "Value" : "puppet_sec" }],
          "VpcId" : { "Ref" : "hydravpc2" }
        }
      },

      "bastSecGp" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupDescription" : "Bastion host security group",
          "SecurityGroupEgress" : [
            { "IpProtocol" : "tcp", "FromPort" : 22, "ToPort" : 22, "CidrIp" : "0.0.0.0/0"},
            { "IpProtocol" : "tcp", "FromPort" : 80, "ToPort" : 80, "CidrIp" : "0.0.0.0/0" },
            { "IpProtocol" : "tcp", "FromPort" : 443, "ToPort" : 443, "CidrIp" : "0.0.0.0/0" }
          ],
          "SecurityGroupIngress" : [
            { "IpProtocol" : "tcp", "FromPort" : 22, "ToPort" : 22, "CidrIp" : "0.0.0.0/0"},
            { "IpProtocol" : "tcp", "FromPort" : 443, "ToPort" : 443, "CidrIp" : "0.0.0.0/0" }
          ],
          "Tags" : [{ "Key" : "Name", "Value" : "bast_sec" }],
          "VpcId" : { "Ref" : "hydravpc2" }
        }
      },

      "natSecGp" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupDescription" : "NAT instance security group",
          "SecurityGroupEgress" : [
            { "IpProtocol" : "tcp", "FromPort" : 22, "ToPort" : 22, "DestinationSecurityGroupId" : {"Ref":"bastSecGp"}},
            { "IpProtocol" : "tcp", "FromPort" : 80, "ToPort" : 80, "CidrIp" : "0.0.0.0/0" },
            { "IpProtocol" : "tcp", "FromPort" : 8080, "ToPort" : 8080, "CidrIp" : "0.0.0.0/0" },
            { "IpProtocol" : "tcp", "FromPort" : 443, "ToPort" : 443, "CidrIp" : "0.0.0.0/0" }
          ],
          "SecurityGroupIngress" : [
            { "IpProtocol" : "tcp", "FromPort" : 22, "ToPort" : 22, "SourceSecurityGroupId" : {"Ref":"bastSecGp" }},
            { "IpProtocol" : "tcp", "FromPort" : 80, "ToPort" : 80, "CidrIp" : "0.0.0.0/0" },
            { "IpProtocol" : "tcp", "FromPort" : 8080, "ToPort" : 8080, "CidrIp" : "0.0.0.0/0" },
            { "IpProtocol" : "tcp", "FromPort" : 443, "ToPort" : 443, "CidrIp" : "0.0.0.0/0" }
          ],
          "Tags" : [{ "Key" : "Name", "Value" : "nat_sec" }],
          "VpcId" : { "Ref" : "hydravpc2" }
        }
      },
      "backSecGp" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupDescription" : "Back end host security group",
          "SecurityGroupEgress" : [
            { "IpProtocol" : "tcp", "FromPort" : 22, "ToPort" : 22, "DestinationSecurityGroupId" : {"Ref":"bastSecGp"} },
            { "IpProtocol" : "tcp", "FromPort" : 80, "ToPort" : 80, "CidrIp" : "0.0.0.0/0" },
            { "IpProtocol" : "tcp", "FromPort" : 8080, "ToPort" : 8080, "DestinationSecurityGroupId" : {"Ref":"webSecGp"} },
            { "IpProtocol" : "tcp", "FromPort" : 8080, "ToPort" : 8080, "DestinationSecurityGroupId" : {"Ref":"natSecGp"} },
            { "IpProtocol" : "tcp", "FromPort" : 443, "ToPort" : 443, "CidrIp" : "0.0.0.0/0" }
          ],
          "SecurityGroupIngress" : [
            { "IpProtocol" : "tcp", "FromPort" : 22, "ToPort" : 22, "SourceSecurityGroupId" : {"Ref":"bastSecGp" } },
            { "IpProtocol" : "tcp", "FromPort" : 80, "ToPort" : 80, "SourceSecurityGroupId" : {"Ref":"natSecGp" } },
            { "IpProtocol" : "tcp", "FromPort" : 8080, "ToPort" : 8080, "SourceSecurityGroupId" : {"Ref":"natSecGp" } },
            { "IpProtocol" : "tcp", "FromPort" : 8080, "ToPort" : 8080, "SourceSecurityGroupId" : {"Ref":"webSecGp" } },
            { "IpProtocol" : "tcp", "FromPort" : 443, "ToPort" : 443, "CidrIp" : "0.0.0.0/0" }
          ],
          "Tags" : [{ "Key" : "Name", "Value" : "back_sec" }],
          "VpcId" : { "Ref" : "hydravpc2" }
        }
      },
      "webSecGp" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupDescription" : "Front end host security group",
          "SecurityGroupEgress" : [
            { "IpProtocol" : "tcp", "FromPort" : 22, "ToPort" : 22, "DestinationSecurityGroupId" : {"Ref":"bastSecGp"}},
            { "IpProtocol" : "tcp", "FromPort" : 80, "ToPort" : 80, "CidrIp" : "0.0.0.0/0" },
            { "IpProtocol" : "tcp", "FromPort" : 8080, "ToPort" : 8080, "CidrIp" : "0.0.0.0/0" },
            { "IpProtocol" : "tcp", "FromPort" : 443, "ToPort" : 443, "CidrIp" : "0.0.0.0/0" }
          ],
          "SecurityGroupIngress" : [
            { "IpProtocol" : "tcp", "FromPort" : 22, "ToPort" : 22, "SourceSecurityGroupId" : {"Ref":"bastSecGp" }},
            { "IpProtocol" : "tcp", "FromPort" : 80, "ToPort" : 80, "CidrIp" : "0.0.0.0/0" },
            { "IpProtocol" : "tcp", "FromPort" : 8080, "ToPort" : 8080, "CidrIp" : "0.0.0.0/0" },
            { "IpProtocol" : "tcp", "FromPort" : 443, "ToPort" : 443, "CidrIp" : "0.0.0.0/0" }
          ],
          "Tags" : [{ "Key" : "Name", "Value" : "web_sec" }],
          "VpcId" : { "Ref" : "hydravpc2" }
        }
      },

      "bastHost" : {
        "Type" : "AWS::EC2::Instance",
        "Properties" : {
          "ImageId" : "ami-b66ed3de",
          "InstanceType" : "t2.small",
          "KeyName" : "bast_key",
          "SecurityGroupIds" : [{"Ref":"bastSecGp"}, {"Ref":"puppetSecGp"}],
          "SubnetId" : {"Ref" : "pubnet"},
          "Tags" : [{"Key" : "Name", "Value" : "bastion_host"}],
          "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", ["#include\nhttps://s3.amazonaws.com/grosscol.hydra-scripts.bash/bast_usr.sh"]]}},
          "Tenancy" : "default"
        },
        "Metadata": {
          "AWS::CloudFormation::Init" : {
            "config" : {
              "packages" : {
                "yum" : {
                  "puppet"        : [],
                  "puppet-server" : [],
                  "ruby-devel"    : [],
                  "gcc"           : [],
                  "make"          : [],
                  "rubygems"      : []
                },
                "rubygems" : {
                  "json"          : []
                }
              },
              "files" : {
                "/etc/yum.repos.d/epel.repo" : {
                  "source" : "https://s3.amazonaws.com/cloudformation-examples/enable-epel-on-amazon-linux-ami",
                  "mode"   : "000644",
                  "owner"  : "root",
                  "group"  : "root"
                },
                "/etc/puppet/autosign.conf" : {
                  "content" : "*.internal\n",
                  "mode"    : "100644",
                  "owner"   : "root",
                  "group"   : "wheel"
                },
                "/etc/puppet/fileserver.conf" : {
                  "content" : "[modules]\n   allow *.internal\n",
                  "mode"    : "100644",
                  "owner"   : "root",
                  "group"   : "wheel"
                },
                "/etc/puppet/puppet.conf" : {
                  "content" : { "Fn::Join" : ["", [
                    "[main]\n",
                    "   logdir=/var/log/puppet\n",
                    "   rundir=/var/run/puppet\n",
                    "   ssldir=$vardir/ssl\n",
                    "   pluginsync=true\n",
                    "[agent]\n",
                    "   classfile=$vardir/classes.txt\n",
                    "   localconfig=$vardir/localconfig\n"]] },
                    "mode"    : "000644",
                    "owner"   : "root",
                    "group"   : "root"
                },
                "/etc/puppet/modules/cfn/manifests/init.pp" : {
                  "content" : "class cfn {}",
                  "mode"    : "100644",
                  "owner"   : "root",
                  "group"   : "wheel"
                },
                "/etc/puppet/modules/cfn/lib/facter/cfn.rb" : {
                  "source"  : "https://s3.amazonaws.com/cloudformation-examples/cfn-facter-plugin.rb",
                  "mode"    : "100644",
                  "owner"   : "root",
                  "group"   : "wheel"
                },
                "/etc/puppet/manifests/nodes.pp" : {
                  "content" : {"Fn::Join" : ["", [
                    "node basenode {\n",
                      "  include cfn\n",
                      "}\n",
                      "node /^.*internal$/ inherits basenode {\n",
                        "  case $cfn_roles {\n",
                          "    ", "base", "\n",
                          "  }\n",
                          "}\n"]]},
                          "mode"    : "100644",
                          "owner"   : "root",
                          "group"   : "wheel"
                },
                "/etc/puppet/manifests/site.pp" : {
                  "content" : "import \"nodes\"\n",
                  "mode"    : "100644",
                  "owner"   : "root",
                  "group"   : "wheel"
                }
              },
              "services" : {
                "sysvinit" : {
                  "puppetmaster" : {
                    "enabled" : "true",
                    "ensureRunning" : "true"
                  }
                }
              }
            }
          }
        }
      },

      "bastEIP" : {
        "Type" : "AWS::EC2::EIP",
        "Properties" : {
          "Domain" : "vpc",
          "InstanceId" : {"Ref":"bastHost"}
        },
        "DependsOn" : "hydraGateway"
      },

      "natHost" : {
        "Type" : "AWS::EC2::Instance",
        "Properties" : {
          "ImageId" : "ami-b66ed3de",
          "InstanceType" : "t2.micro",
          "KeyName" : "hydra_key",
          "SecurityGroupIds" : [{"Ref":"natSecGp"}],
          "SubnetId" : {"Ref" : "pubnet"},
          "SourceDestCheck" : false,
          "Tags" : [{"Key" : "Name", "Value" : "nat_host"}],
          "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", ["#include\nhttps://s3.amazonaws.com/grosscol.hydra-scripts.bash/nat_usr.sh"]]}},
          "Tenancy" : "default"
        }
      },
      "natEIP" : {
        "Type" : "AWS::EC2::EIP",
        "Properties" : {
          "Domain" : "vpc",
          "InstanceId" : {"Ref":"natHost"}
        },
        "DependsOn" : "hydraGateway"
      },

      "prvRTable" : {
        "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId" : { "Ref" : "hydravpc2" },
          "Tags" : [{ "Key" : "Name", "Value" : "prv_rtable" }]
        }
      },
      "prvroute" : {
        "Type" : "AWS::EC2::Route",
        "Properties" : {
          "DestinationCidrBlock" : "0.0.0.0/0",
          "InstanceId" : { "Ref" : "natHost" },
          "RouteTableId" : { "Ref" : "prvRTable" }
        },
        "DependsOn" : "natHost"
      },
      "prvTableAssoc" : {
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "RouteTableId" : { "Ref" : "prvRTable" },
          "SubnetId" : { "Ref" : "prvnet" }
        }
      },

      "backHost" : {
        "Type" : "AWS::EC2::Instance",
        "Properties" : {
          "ImageId" : "ami-a458e2cc",
          "InstanceType" : "t2.medium",
          "KeyName" : "hydra_key",
          "SecurityGroupIds" : [{"Ref":"backSecGp"}, {"Ref":"puppetSecGp"}],
          "SubnetId" : {"Ref" : "prvnet"},
          "Tags" : [{"Key" : "Name", "Value" : "back_host"}],
          "IamInstanceProfile": {"Ref": "peekerProfile"},
          "UserData" : {
            "Fn::Base64": { "Fn::Join": [ "",
                [
                "Bastion=", {"Fn::GetAtt" : [ "bastHost" , "PrivateIp"]}, "\n",
                "#include\nhttps://s3.amazonaws.com/grosscol.hydra-scripts.bash/back_usr.sh"
                ]
              ]
            }
          },
          "Tenancy" : "default"
        },
        "DependsOn" : "prvroute",
        "Metadata" : { "PuppetIp": { "Fn::GetAtt": ["bastHost","PrivateIp"] } }
      }
   }
} 
